cmake_minimum_required(VERSION 3.21)

# ---- Options ----

option(COPY_BUILD "Copy the build output to the Skyrim SE directory." OFF)

# ---- Cache build vars ----

macro(set_from_env VARIABLE)
	if(NOT DEFINED ${VARIABLE} AND DEFINED ENV{${VARIABLE}})
		set(${VARIABLE} $ENV{${VARIABLE}})
	endif()
endmacro()

set_from_env(Skyrim64Path)

# ---- Project ----

project(
	QUI
	VERSION 0.1.4
	LANGUAGES CXX
)

configure_file(
	"${CMAKE_CURRENT_SOURCE_DIR}/etc/cmake/Version.h.in"
	"${CMAKE_CURRENT_BINARY_DIR}/include/Version.h"
	@ONLY
)

configure_file(
	"${CMAKE_CURRENT_SOURCE_DIR}/etc/cmake/version.rc.in"
	"${CMAKE_CURRENT_BINARY_DIR}/version.rc"
	@ONLY
)

# ---- Include guards ----

if("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")
	message(FATAL_ERROR "In-source builds are not allowed.")
endif()

# ---- Globals ----

set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "CMake")
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# ---- Dependencies ----

add_subdirectory("lib/CommonLibSSE" CommonLibSSE)

find_package(spdlog REQUIRED CONFIG)
find_package(frozen REQUIRED CONFIG)
find_package(tomlplusplus REQUIRED CONFIG)

# ---- Add source files ----

include(etc/cmake/sourcelist.cmake)

source_group(
	TREE "${CMAKE_CURRENT_SOURCE_DIR}"
	FILES ${SOURCES}
)

source_group(
	TREE "${CMAKE_CURRENT_BINARY_DIR}"
	FILES "${CMAKE_CURRENT_BINARY_DIR}/include/Version.h"
)

# ---- Create DLL ----

add_library(
	"${PROJECT_NAME}"
	SHARED
		${SOURCES}
		"${CMAKE_CURRENT_BINARY_DIR}/include/Version.h"
		"${CMAKE_CURRENT_BINARY_DIR}/version.rc"
		"res/QUI.toml"
		".clang-format"
		".editorconfig"
)

target_compile_features(
	"${PROJECT_NAME}"
	PRIVATE
		cxx_std_20
)

target_include_directories(
	"${PROJECT_NAME}"
	PRIVATE
		"${CMAKE_CURRENT_BINARY_DIR}/include"
		"${CMAKE_CURRENT_SOURCE_DIR}/src/c++"
)

target_link_libraries(
	"${PROJECT_NAME}"
	PUBLIC
		CommonLibSSE::CommonLibSSE
		spdlog::spdlog
		frozen::frozen
		tomlplusplus::tomlplusplus
)

if(MSVC)
	target_compile_options(
		"${PROJECT_NAME}"
		PRIVATE
			"/sdl"	 # Enable Additional Security Checks
			"/utf-8" # Set Source and Executable character sets to UTF-8
			"/Zi"	 # Debug Information Format

			"/permissive-" # Standards conformance

			"/Zc:preprocessor" # Enable preprocessor conformance mode

			"$<$<CONFIG:DEBUG>:>"
			"$<$<CONFIG:RELEASE>:/Zc:inline;/JMC->"
	)

	target_link_options(
		"${PROJECT_NAME}"
		PRIVATE
			"/WX" # Treat Linker Warnings as Errors
			"$<$<CONFIG:DEBUG>:/INCREMENTAL;/OPT:NOREF;/OPT:NOICF>"
			"$<$<CONFIG:RELEASE>:/INCREMENTAL:NO;/OPT:REF;/OPT:ICF;/DEBUG:FULL>"
	)
endif()

target_precompile_headers(
	"${PROJECT_NAME}"
	PRIVATE
		"src/c++/PCH.h"
)

# ---- File copying ----

if(COPY_BUILD)
	if(DEFINED Skyrim64Path)
		add_custom_command(
			TARGET "${PROJECT_NAME}"
			POST_BUILD
			COMMAND "${CMAKE_COMMAND}" -E make_directory "${Skyrim64Path}/Data/SKSE/Plugins/"
			COMMAND "${CMAKE_COMMAND}" -E copy_if_different "$<TARGET_FILE:${PROJECT_NAME}>" "${Skyrim64Path}/Data/SKSE/Plugins/"
			COMMAND "${CMAKE_COMMAND}" -E copy_if_different "${CMAKE_SOURCE_DIR}/res/QUI.toml" "${Skyrim64Path}/Data/SKSE/Plugins/"
			COMMAND "${CMAKE_COMMAND}" -E make_directory "${Skyrim64Path}/Data/Interface/"
			COMMAND "${CMAKE_COMMAND}" -E copy_if_different "${CMAKE_SOURCE_DIR}/src/swf/PluginExplorerMenu.swf" "${Skyrim64Path}/Data/Interface/"
			COMMAND "${CMAKE_COMMAND}" -E copy_if_different "${CMAKE_SOURCE_DIR}/src/swf/StartMenuEx.swf" "${Skyrim64Path}/Data/Interface/"
		)
	else()
		message(WARNING "Variable Skyrim64Path is not defined. Skipping post-build copy command.")
	endif()
endif()
